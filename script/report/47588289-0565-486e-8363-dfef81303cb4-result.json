{"name": "支付接口测试用例", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL 'None': No schema supplied. Perhaps you meant http://None?", "trace": "self = <Review.Week9.apiFrame.script.testpayorder.TestPayOrder object at 0x00000213F4CF7388>\n\n    @allure.story('支付接口的测试')\n    @allure.title('支付接口测试用例')\n    def testpayorder(self):\n    \n        '''\n              对支付接口进行测试\n              :return:\n              '''\n        # 请求支付接口\n>       resp_pay = self.payorder_obj.payorder(self.session)\n\ntestpayorder.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\api\\payorderapi.py:26: in payorder\n    resp = session.get(self.url, allow_redirects=False)\n..\\..\\..\\..\\venv\\lib\\site-packages\\requests\\sessions.py:555: in get\n    return self.request('GET', url, **kwargs)\n..\\..\\..\\..\\venv\\lib\\site-packages\\requests\\sessions.py:528: in request\n    prep = self.prepare_request(req)\n..\\..\\..\\..\\venv\\lib\\site-packages\\requests\\sessions.py:466: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n..\\..\\..\\..\\venv\\lib\\site-packages\\requests\\models.py:316: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [GET]>, url = 'None', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n            error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")\n            error = error.format(to_native_string(url, 'utf8'))\n    \n>           raise MissingSchema(error)\nE           requests.exceptions.MissingSchema: Invalid URL 'None': No schema supplied. Perhaps you meant http://None?\n\n..\\..\\..\\..\\venv\\lib\\site-packages\\requests\\models.py:390: MissingSchema"}, "description": "\n              对支付接口进行测试\n              :return:\n              ", "start": 1632468886377, "stop": 1632468886377, "uuid": "d9c84469-7c98-4118-82c5-ac344bb94539", "historyId": "2c3613215ff084c012a9efdff26c9ca9", "testCaseId": "aa11dcc67f1b88c5fb9a43425f7870f9", "fullName": "script.testpayorder.TestPayOrder#testpayorder", "labels": [{"name": "story", "value": "支付接口的测试"}, {"name": "parentSuite", "value": "script"}, {"name": "suite", "value": "testpayorder"}, {"name": "subSuite", "value": "TestPayOrder"}, {"name": "host", "value": "PC-021"}, {"name": "thread", "value": "30872-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "script.testpayorder"}]}